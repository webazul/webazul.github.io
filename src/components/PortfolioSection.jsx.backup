import { useState, useEffect } from 'react'
import { useTranslation } from 'react-i18next'
import './PortfolioSection.css'
import { FaCheck, FaEnvelope, FaCar, FaHome, FaChevronLeft, FaChevronRight } from 'react-icons/fa'

function PortfolioSection() {
  const { t } = useTranslation()
  const [isVisible, setIsVisible] = useState(false)
  const [activeImageIndex, setActiveImageIndex] = useState({})

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true)
        }
      },
      { threshold: 0.1 }
    )

    const section = document.getElementById('portfolio')
    if (section) {
      observer.observe(section)
    }

    return () => observer.disconnect()
  }, [])


  const products = [
    {
      id: 1,
      category: 'automotive',
      title: t('portfolio.products.autoazul.title'),
      description: t('portfolio.products.autoazul.description'),
      features: t('portfolio.products.autoazul.features', { returnObjects: true }),
      images: t('portfolio.products.autoazul.images', { returnObjects: true }),
      tech: t('portfolio.products.autoazul.tech', { returnObjects: true }),
      year: t('portfolio.products.autoazul.year'),
      status: t('portfolio.products.autoazul.status'),
      pricing: t('portfolio.products.autoazul.pricing'),
      icon: FaCar
    },
    {
      id: 2,
      category: 'real_estate',
      title: t('portfolio.products.imobiazul.title'),
      description: t('portfolio.products.imobiazul.description'),
      features: t('portfolio.products.imobiazul.features', { returnObjects: true }),
      images: t('portfolio.products.imobiazul.images', { returnObjects: true }),
      tech: t('portfolio.products.imobiazul.tech', { returnObjects: true }),
      year: t('portfolio.products.imobiazul.year'),
      status: t('portfolio.products.imobiazul.status'),
      pricing: t('portfolio.products.imobiazul.pricing'),
      icon: FaHome
    }
  ]


  const scrollToContact = () => {
    document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' })
  }

  const nextImage = (productId, imagesLength) => {
    setActiveImageIndex(prev => ({
      ...prev,
      [productId]: ((prev[productId] || 0) + 1) % imagesLength
    }))
  }

  const prevImage = (productId, imagesLength) => {
    setActiveImageIndex(prev => ({
      ...prev,
      [productId]: ((prev[productId] || 0) - 1 + imagesLength) % imagesLength
    }))
  }

  return (
    <section id="portfolio" className={`portfolio-section ${isVisible ? 'visible' : ''}`}>
      <div className="portfolio-container">
        <div className="portfolio-header">
          <div className="portfolio-badge">
            <span>{t('portfolio.badge')}</span>
          </div>
          <h2 className="portfolio-title">
            {t('portfolio.title')}
            <span className="title-highlight"> {t('portfolio.titleHighlight')}</span>
          </h2>
          <p className="portfolio-subtitle">
            {t('portfolio.subtitle')}
          </p>
        </div>


        <div className="products-grid">
          {products.map((product, index) => {
            const IconComponent = product.icon
            const currentImageIndex = activeImageIndex[product.id] || 0
            const images = Array.isArray(product.images) ? product.images : []
            const features = Array.isArray(product.features) ? product.features : []


            return (
              <div
                key={product.id}
                className="product-card"
                style={{ animationDelay: `${index * 0.2}s` }}
              >
                {/* Image Carousel */}
                <div className="product-image-carousel">
                  {images.length > 0 ? (
                    <>
                      <img
                        src={images[currentImageIndex]}
                        alt={`${product.title} - ${currentImageIndex + 1}`}
                        className="product-image"
                      />
                      {images.length > 1 && (
                        <>
                          <button
                            className="carousel-btn prev"
                            onClick={() => prevImage(product.id, images.length)}
                            aria-label="Imagem anterior"
                          >
                            <FaChevronLeft />
                          </button>
                          <button
                            className="carousel-btn next"
                            onClick={() => nextImage(product.id, images.length)}
                            aria-label="PrÃ³xima imagem"
                          >
                            <FaChevronRight />
                          </button>
                          <div className="carousel-indicators">
                            {images.map((_, idx) => (
                              <span
                                key={idx}
                                className={`indicator ${idx === currentImageIndex ? 'active' : ''}`}
                                onClick={() => setActiveImageIndex(prev => ({ ...prev, [product.id]: idx }))}
                              />
                            ))}
                          </div>
                        </>
                      )}
                    </>
                  ) : (
                    <div style={{ height: '250px', background: '#f3f4f6', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                      No images available
                    </div>
                  )}
                </div>

                <div className="product-content">
                  <div className="product-header">
                    <div className="product-icon">
                      <IconComponent />
                    </div>
                    <h3 className="product-title">{product.title}</h3>
                  </div>

                  <p className="product-description">{product.description}</p>

                  {/* Features List */}
                  {features.length > 0 ? (
                    <div className="product-features">
                      <ul>
                        {features.slice(0, 4).map((feature, idx) => (
                          <li key={idx}>
                            <FaCheck className="feature-check" />
                            {feature}
                          </li>
                        ))}
                      </ul>
                    </div>
                  ) : (
                    <div style={{ padding: '1rem', background: '#fef2f2', color: '#b91c1c' }}>
                      No features available
                    </div>
                  )}

                  <div className="product-footer">
                    <span className="product-pricing">{product.pricing}</span>
                    <button className="product-btn" onClick={scrollToContact}>
                      {t('portfolio.buttons.contact')}
                    </button>
                  </div>
                </div>
              </div>
            )
          })}
        </div>

      </div>
    </section>
  )
}

export default PortfolioSection